package ${packager}.service;

import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import com.ijson.BaseTest;
import ${packager}.dao.entity.${name}Entity;
import ${packager}.query.${name}Query;
import com.ijson.framework.dao.entity.AuthEntity;
import com.ijson.framework.dao.entity.RoleEntity;
import com.ijson.framework.exception.FrameworkBusinessExceptionCode;
import com.ijson.framework.exception.ParamsValidateException;
import com.ijson.framework.model.AuthContext;
import com.ijson.framework.model.Constant;
import com.ijson.framework.service.AuthService;
import com.ijson.framework.service.RoleService;
import com.ijson.mongo.support.model.Page;
import com.ijson.rest.proxy.util.JsonUtil;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

@Slf4j
public class ${name}ServiceTest extends BaseTest {

    @Autowired
    private AuthService authService;

    @Autowired
    private RoleService roleService;

    @Autowired
    private ${name}Service ${lowerFirstName}Service;


    @Test
    public void findInternalById() {
        String id = "";
        ${name}Entity internalById = ${lowerFirstName}Service.findInternalById(id);
        log.info(JsonUtil.toJson(internalById));
    }

    @Test
    public void findById() {
        String id = "";
        ${name}Entity internalById = ${lowerFirstName}Service.findById(id);
        log.info(JsonUtil.toJson(internalById));
    }

    @Test
    public void deleteById() {
        AuthContext context = AuthContext.id("5d596de34737fb1c7ad99d3f");
        String id = "";
        ${lowerFirstName}Service.deleteById(context, id);
    }

    @Test
    public void edit() {
        AuthContext context = AuthContext.id("5d596de34737fb1c7ad99d3f");
        ${name}Entity entity = new ${name}Entity();
        entity.setId("");
        //****** set begin


        //****** set end
        ${lowerFirstName}Service.edit(context, entity);
    }

    @Test
    public void enable() {
        AuthContext context = AuthContext.id("5d596de34737fb1c7ad99d3f");
        String id = "";
        ${lowerFirstName}Service.enable(context, id, false);
    }

    @Test
    public void deleteInternalById() {
        AuthContext context = AuthContext.id("5d596de34737fb1c7ad99d3f");
        String id = "";
        ${lowerFirstName}Service.deleteInternalById(context, id);
    }

    @Test
    public void create() {
        AuthContext context = AuthContext.id("5d596de34737fb1c7ad99d3f");
        ${name}Entity entity = new ${name}Entity();
        //****** set begin


        //****** set end
        ${lowerFirstName}Service.create(context, entity);
    }

    @Test
    public void find() {
        ${name}Query query = new ${name}Query();
        Page page = new Page();
        ${lowerFirstName}Service.find(query, page);
    }

    @RequestMapping("/list/${lowerFirstName}")
    public ModelAndView ${lowerFirstName}List(HttpServletRequest request) {
        ModelAndView view = new ModelAndView();
        AuthContext context = EhcacheUtil.instance.get(CacheKeys.login_user, PassportHelper.getInstance().getCurrCookie(request));
        if (Objects.isNull(context)) {
            return new ModelAndView(new RedirectView(webCtx));
        }
        view.setViewName("admin/list-${lowerFirstName}.html");
        addAdminModelAndView(view, request);
        return view;
    }


    @RequestMapping("/save/${lowerFirstName}")
    public ModelAndView skip${name}Add(HttpServletRequest request) {
        ModelAndView view = new ModelAndView();
        AuthContext context = EhcacheUtil.instance.get(CacheKeys.login_user, PassportHelper.getInstance().getCurrCookie(request));
        if (Objects.isNull(context)) {
            return new ModelAndView(new RedirectView(webCtx));
        }
        view.setViewName("admin/save-${lowerFirstName}.html");
        addAdminModelAndView(view, request);
        view.addObject("editData", null);
        return view;
    }

    @RequestMapping("/edit/${lowerFirstName}/{id}")
    public ModelAndView skip${name}Edit(@PathVariable("id") String id, HttpServletRequest request) {
        ModelAndView view = new ModelAndView();
        AuthContext context = EhcacheUtil.instance.get(CacheKeys.login_user, PassportHelper.getInstance().getCurrCookie(request));
        if (Objects.isNull(context)) {
            return new ModelAndView(new RedirectView(webCtx));
        }
        view.setViewName("admin/save-${lowerFirstName}.html");
        addAdminModelAndView(view, request);
        ${name}Entity internalById = ${lowerFirstName}Service.findInternalById(id);
        view.addObject("editData", ${name}Info.create(internalById));
        return view;
    }

    /**
     * 生成权限脚本,单独菜单
     */
    @Test
    public void createAuthMongoShell() {
        AuthContext context = AuthContext.id("5d596de34737fb1c7ad99d3f");
        String fatherId = "0";


        String name = "";
        if(Strings.isNullOrEmpty(name)){
            throw new ParamsValidateException("未设置中文名称");
        }
        int order = getOrder(fatherId, "");

        AuthEntity baseEntity = AuthEntity.create(context, name + " 管理", "admin_${lowerFirstName}_settings","#", true, Constant.MenuType.menu, fatherId);

        baseEntity.setOrder(order);
        baseEntity.setIcon("layui-icon-rate");

        if (Objects.nonNull(authService.findByEname(baseEntity.getEname()))) {
            throw new ParamsValidateException(FrameworkBusinessExceptionCode.AUTH_ENAME_ALREADY_EXIST);
        }

        AuthEntity newAuth = authService.create(context, baseEntity);
        RoleEntity systemRole = roleService.findByEname(Constant.SYSTEM);
        systemRole.getAuthIds().add(newAuth.getId());
        systemRole.setVerifyCmt(false);
        systemRole.setVerify(false);
        roleService.edit(context, systemRole);

        List<AuthEntity> menePath = Lists.newArrayList(
                AuthEntity.create(context, name + " 列表","", "admin/list/${lowerFirstName}", true, Constant.MenuType.menu, newAuth.getId()),
                AuthEntity.create(context, "添加 " + name, "","admin/save/${lowerFirstName}", false, Constant.MenuType.menu, newAuth.getId()),
                AuthEntity.create(context, "编辑 " + name,"", "admin/edit/${lowerFirstName}/*", false, Constant.MenuType.menu, newAuth.getId()),
                AuthEntity.create(context, "新增/编辑 " + name,"", "${lowerFirstName}/addup", false, Constant.MenuType.action, newAuth.getId()),
                AuthEntity.create(context, "启用/停用 " + name,"", "${lowerFirstName}/enable/*", false, Constant.MenuType.action, newAuth.getId()),
                AuthEntity.create(context, "删除 " + name, "","${lowerFirstName}/delete/*", false, Constant.MenuType.action, newAuth.getId()),
                AuthEntity.create(context, name + " 列表", "","${lowerFirstName}/list", false, Constant.MenuType.action, newAuth.getId())
        );

        for (AuthEntity entity : menePath) {
            int orderItem = getOrder(entity.getFatherId(), "");
            entity.setOrder(orderItem);
            if (Objects.nonNull(authService.findByEname(entity.getEname()))) {
                throw new ParamsValidateException(FrameworkBusinessExceptionCode.AUTH_ENAME_ALREADY_EXIST);
            }
            AuthEntity childAuth = authService.create(context, entity);
            RoleEntity systemRoleChild = roleService.findByEname(Constant.SYSTEM);
            systemRoleChild.getAuthIds().add(childAuth.getId());
            systemRoleChild.setVerifyCmt(false);
            systemRoleChild.setVerify(false);
            roleService.edit(context, systemRoleChild);
        }
    }


     /**
     * 生成权限脚本,在管理员设置下
     */
    @Test
    public void createAuthMongoAdminShell() {
        AuthContext context = AuthContext.id("5d596de34737fb1c7ad99d3f");
        String fatherId = "5e2d3e781df8f4873b461ea2";//管理员设置


        String name = "";
        if(Strings.isNullOrEmpty(name)){
            throw new ParamsValidateException("未设置中文名称");
        }

        List<AuthEntity> menePath = Lists.newArrayList(
                AuthEntity.create(context, name + " 列表","", "admin/list/${lowerFirstName}", true, Constant.MenuType.menu,fatherId),
                AuthEntity.create(context, "添加 " + name, "","admin/save/${lowerFirstName}", false, Constant.MenuType.menu,fatherId),
                AuthEntity.create(context, "编辑 " + name,"", "admin/edit/${lowerFirstName}/*", false, Constant.MenuType.menu, fatherId),
                AuthEntity.create(context, "新增/编辑 " + name,"", "${lowerFirstName}/addup", false, Constant.MenuType.action, fatherId),
                AuthEntity.create(context, "启用/停用 " + name,"", "${lowerFirstName}/enable/*", false, Constant.MenuType.action, fatherId),
                AuthEntity.create(context, "删除 " + name, "","${lowerFirstName}/delete/*", false, Constant.MenuType.action, fatherId),
                AuthEntity.create(context, name + " 列表", "","${lowerFirstName}/list", false, Constant.MenuType.action, fatherId)
        );

        for (AuthEntity entity : menePath) {
            int orderItem = getOrder(entity.getFatherId(), "");
            entity.setOrder(orderItem);
            if (Objects.nonNull(authService.findByEname(entity.getEname()))) {
                throw new ParamsValidateException(FrameworkBusinessExceptionCode.AUTH_ENAME_ALREADY_EXIST);
            }
            AuthEntity childAuth = authService.create(context, entity);
            RoleEntity systemRoleChild = roleService.findByEname(Constant.SYSTEM);
            systemRoleChild.getAuthIds().add(childAuth.getId());
            systemRoleChild.setVerifyCmt(false);
            systemRoleChild.setVerify(false);
            roleService.edit(context, systemRoleChild);
        }
    }



    public int getOrder(String id, String currentAuthId) {
        List<AuthEntity> authEntities = authService.findChild(id);

        if (Objects.isNull(authEntities)) {
            return 0;
        }

        if (Strings.isNullOrEmpty(currentAuthId)) {
            return authEntities.size();
        } else {
            Map<String, AuthEntity> authEntityMap = authEntities.stream().collect(Collectors.toMap(AuthEntity::getId, v -> v));
            if (authEntityMap.containsKey(currentAuthId)) {
                return authEntityMap.get(currentAuthId).getOrder();
            } else {
                return authEntities.size();
            }
        }
    }
}


