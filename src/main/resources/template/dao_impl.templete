package ${packager}.dao.impl;

import com.google.common.base.Strings;
import ${packager}.dao.${name}Dao;
import ${packager}.dao.entity.${name}Entity;
import ${packager}.query.${name}Query;
import com.ijson.framework.dao.ShortUrlDao;
import com.ijson.framework.dao.entity.ShortUrlEntity;
import com.ijson.mongo.generator.util.ObjectId;
import com.ijson.mongo.support.AbstractDaoImpl;
import com.ijson.mongo.support.entity.page.Page;
import com.ijson.mongo.support.entity.page.PageResult;
import com.mongodb.WriteConcern;
import org.apache.commons.collections.CollectionUtils;
import org.mongodb.morphia.query.Query;
import org.mongodb.morphia.query.UpdateOperations;
import org.springframework.stereotype.Component;
import com.ijson.framework.model.AuthContext;

import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.Set;

@Component
public class ${name}DaoImpl extends AbstractDaoImpl<${name}Entity,${name}Query> implements ${name}Dao {

    @Autowired
    private ShortUrlDao shortUrlDao;

    @Override
    public ${name}Entity update(${name}Entity entity) {
        Query<${name}Entity> query = createEqualQuery(${name}Entity.Fields._id, entity.getId());
        UpdateOperations operations = createUpdate();

        <%
            for(col in columns){
                print("\t\tset(operations, "+name+"Entity.Fields."+col.toUpperName+", entity.get"+col.toSimpleName+"());\n");
            }
        %>

        return findAndModify(query, operations);
    }



    @Override
    public PageResult<${name}Entity> find(${name}Query iquery, Page page) {
        Query<${name}Entity> query = datastore.createQuery(${name}Entity.class);
        if (!Strings.isNullOrEmpty(iquery.getId())) {
            query.field(${name}Entity.Fields._id).equal(iquery.getId());
        }

        query.field(${name}Entity.Fields.deleted).equal(false);
        if (!Strings.isNullOrEmpty(page.getOrderBy())) {
            query.order("-" + page.getOrderBy());//添加排序
        } else {
            query.order("-" + ${name}Entity.Fields._id);
        }
        if (page.getPageNumber() > 0) {
            query.offset((page.getPageNumber() - 1) * page.getPageSize()).limit(page.getPageSize());
        }

        long totalNum = query.countAll();
        List<${name}Entity> entities = query.asList();

        if (CollectionUtils.isNotEmpty(entities)) {
            ${name}Entity.shortUrl(entities, shortUrlDao.getShortUrlByAliasIds(entities.stream().map(${name}Entity::getId).collect(Collectors.toSet())));
        }

        PageResult<${name}Entity> ret = new PageResult<>();
        ret.setDataList(entities);
        ret.setTotal(totalNum);
        return ret;
    }



    @Override
    public void delete(String id) {
        super.delete(${name}Entity.Fields._id);
        shortUrlDao.deleteByField(ShortUrlEntity.Fields.RVID,id);
    }


}