package ${packager}.controller.admin;

import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import ${packager}.dao.entity.${name}Entity;
import ${packager}.query.${name}Query;
import ${packager}.service.${name}Service;
import ${packager}.service.model.info.${name}Info;
import com.ijson.framework.controller.BaseAction;
import com.ijson.framework.exception.ParamsValidateException;
import com.ijson.framework.model.AuthContext;
import com.ijson.framework.result.Result;
import com.ijson.framework.result.V2Result;
import com.ijson.mongo.support.model.Page;
import com.ijson.mongo.support.model.PageResult;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Objects;

/**
 * desc:
 * version: 7.0.0
 * Created by cuiyongxu on 2020/1/25 4:32 PM
 */
@Slf4j
@RestController
@RequestMapping("/${lowerFirstName}")
public class ${name}Controller extends BaseAction {

    @Autowired
    private ${name}Service ${lowerFirstName}Service;

    @PostMapping(value = "/addup")
    public Result addOrUpdate(HttpServletRequest request, @RequestBody ${name}Entity myEntity) {
        AuthContext context = regularCheck(request, Boolean.FALSE, Boolean.FALSE);

        <%
            for(col in columns){
                print("\t\tif(Strings.isNullOrEmpty(myEntity.get"+col.toSimpleName+"())){\n");
                print("\t\t throw new ParamsValidateException(\"异常信息\");\n");
                print("\t\t}\n");
            }
        %>

        if (Strings.isNullOrEmpty(myEntity.getId())) {
            return create(request, myEntity);
        }

        ${name}Entity entity = ${lowerFirstName}Service.findInternalById(myEntity.getId());


        <%
            for(col in columns){
                print("\t\tentity.set"+col.toSimpleName+"(myEntity.get"+col.toSimpleName+"());\n");
            }
        %>


        ${lowerFirstName}Service.edit(context, entity);
        return Result.ok("更新成功!");
    }

    private Result create(HttpServletRequest request, ${name}Entity myEntity) {
        AuthContext context = regularCheck(request, Boolean.FALSE, Boolean.FALSE);
        ${lowerFirstName}Service.create(context, myEntity);
        return Result.ok("创建成功!");
    }

    @PostMapping(value = "/enable/{id}")
    public Result enable(HttpServletRequest request, @PathVariable("id") String id) {
        AuthContext context = regularCheck(request, Boolean.FALSE, Boolean.FALSE);
        ${name}Entity entity = ${lowerFirstName}Service.findInternalById(id);

        if (Objects.isNull(entity)) {
            throw new ParamsValidateException("数据不存在或已删除");
        }
        ${lowerFirstName}Service.enable(context,id, !entity.isEnable());
        return Result.ok(entity.isEnable() ? "禁用成功!" : "启用成功!");
    }

    @PostMapping(value = "/delete/{id}")
    public Result delete(HttpServletRequest request, @PathVariable("id") String id) {
        AuthContext context = regularCheck(request, Boolean.FALSE, Boolean.FALSE);
        ${name}Entity entity = ${lowerFirstName}Service.findInternalById(id);

        if (Objects.isNull(entity)) {
            throw new ParamsValidateException("数据不存在或已删除");
        }

        if (entity.isEnable()) {
            log.info("启用状态无法删除");
            throw new ParamsValidateException("启用状态无法删除");
        }

        ${lowerFirstName}Service.deleteById(context,id);
        return Result.ok("删除成功!");
    }


    @RequestMapping("/list")
    @ResponseBody
    public V2Result<${name}Info> list(Integer page, Integer limit, HttpServletRequest request) {

        AuthContext context = regularCheck(request, Boolean.TRUE, Boolean.TRUE);
        if (Objects.isNull(context)) {
            return new V2Result<>();
        }

        String keyWord = request.getParameter("title");

        Page pageEntity = new Page();
        if (Objects.nonNull(page)) {
            pageEntity.setPageNumber(page);
        }
        if (Objects.nonNull(limit)) {
            pageEntity.setPageSize(limit);
        }


        ${name}Query query = new ${name}Query();
        if (!Strings.isNullOrEmpty(keyWord)) {
            ////query.setCname(keyWord);
        }

        PageResult<${name}Entity> result = ${lowerFirstName}Service.find(query, pageEntity);

        if (Objects.isNull(result) || CollectionUtils.isEmpty(result.getDataList())) {
            return new V2Result<>();
        }

        List<${name}Entity> dataList = result.getDataList();
        List<${name}Info> ${lowerFirstName}Infos = Lists.newArrayList();
        if (CollectionUtils.isNotEmpty(dataList)) {
            ${lowerFirstName}Infos = ${name}Info.createList(dataList);
        }

        V2Result v2Result = new V2Result();
        v2Result.setCode(0);
        v2Result.setCount(result.getTotal());
        v2Result.setData(${lowerFirstName}Infos);
        v2Result.setMsg("");
        return v2Result;
    }
}